"""–ù–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞!
–í BotFather —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /setprivacy, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–∫–ª—é—á–∏—Ç—å "Disabled" (–í—ã–∫–ª—é—á–µ–Ω–æ) –†–µ–∂–∏–º –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ (Privacy Mode)
–°–æ–∑–¥–∞—Ç—å .env —Ñ–∞–π–ª —Å –æ–¥–Ω–æ–∏–º–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ TELEGRAM_TOKEN=12345, –∏ —Ç.–¥. """

import asyncio
import logging
import json
import uuid
from datetime import datetime, timedelta

import aiohttp
from aioredis import Redis
from dotenv import load_dotenv
from os import getenv

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import CommandStart, Command
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode, ChatType
from aiogram.types import ChatMemberAdministrator, ChatMemberOwner, ChatMemberRestricted, ChatMemberLeft, ChatMemberBanned, ChatMemberMember
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery


# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_dotenv()
ADMIN_ID = int(getenv("ADMIN_ID", 123456))
TELEGRAM_TOKEN = getenv("TELEGRAM_TOKEN")
RAPIDAPI_KEY = getenv("RAPIDAPI_KEY")
REDIS_HOST = getenv("REDIS_HOST", "localhost")
REDIS_PORT = int(getenv("REDIS_PORT", 6379))

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–∏–º–∏—Ç–æ–≤
LIMIT_SECONDS = 5
WHITELIST = {getenv("ADMIN_ID"), 987654321}

ADMIN_IDS = {}
MAX_HISTORY = 10000 # –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å—Ç–æ—Ä–∏–∏
MAX_TO_GPT = 2000 # –°–æ–æ–±—â–µ–Ω–∏–π –≤ –≥–ø—Ç
MAX_SUM = 3000 # —Å–∏–≤–ª–æ–ª–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ —Å—É–º–º–∞—Ä
DEF_SUM_MES = 200 # –¥–µ—Ñ–æ–ª—Ç–Ω–æ –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
SEND_MES = 2 # —á–∏—Å–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ 24—á
SEND_MES_GROUP = 5 # —á–∏—Å–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ 24—á

VERIFICATION_REM = 1 # —á–∞—Å
BAN_AFTER_HOURS = 20 # —á–∞—Å–æ–≤ –¥–æ –±–∞–Ω–∞


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è 
bot = Bot(token=TELEGRAM_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
dp["started_at"] = datetime.now().strftime("%Y-%m-%d %H:%M")


## –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Privacy Mode
async def main_aio():  
	bot_info = await bot.get_me()    
	if bot_info.can_read_all_group_messages:
		print("–†–µ–∂–∏–º –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –≤—ã–∫–ª—é—á–µ–Ω: –±–æ—Ç –º–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ.")
	else:
		print("–†–µ–∂–∏–º –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –≤–∫–ª—é—á–µ–Ω: –±–æ—Ç –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —á—Ç–µ–Ω–∏—é –≤ –≥—Ä—É–ø–ø–∞—Ö.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
r = None
async def init_redis():
	global r
	try:
		r = await Redis.from_url(f"redis://{REDIS_HOST}:{REDIS_PORT}", decode_responses=True)
		logging.info("Connected to Redis successfully")
	except Exception as e:
		logging.error(f"Failed to connect to Redis: {e}")

# –ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ Start
@dp.message(CommandStart())
async def start(message: Message):
	if message.chat.type == ChatType.PRIVATE:
		await message.answer(
			#"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–æ–≤. –î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∏ –∏—Å–ø–æ–ª—å–∑—É–π /summarize"
			"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–æ–≤, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ /right"
		)

#–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
@dp.message(F.text, Command("run_info"))
async def cmd_info(message: Message, started_at: str):    
	await message.answer(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω {started_at}")

# —Ç–µ—Å—Ç –∫–æ–º–∞–¥—ã 
@dp.message(Command("t2"))
async def cmd2(message: types.Message):
	await message.answer("1")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
@dp.message(Command("right"))
async def get_perm(message: types.Message):
	try:
		user_id = message.reply_to_message.from_user.id
	except Exception as e:
		user_id = bot.id
		await main_aio()
	chat_id = message.chat.id
	logging.info(f"Check right {user_id}")
	has_permission, message = await check_admin_permissions(chat_id, user_id)
	print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {message}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–¥—ã summarize
@dp.message(Command("summarize"))
async def summarize(message: Message):
	logging.info(f"summarize {message.chat.type}")
	if message.chat.type not in (ChatType.GROUP, ChatType.SUPERGROUP):
		await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö!")
		return

	user_id = message.from_user.id
	chat_id = message.chat.id
	chat_Ti = message.chat.title
	
	# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø —É —á–∞—Ç–∞ –∏ —é–∑–µ—Ä–∞
	if await is_user_approved(chat_id, user_id):
		try:
			num_messages = int(message.text.split()[1]) if len(message.text.split()) > 1 else DEF_SUM_MES
			num_messages = max(10, min(num_messages, MAX_TO_GPT))
		except ValueError:
			await message.answer(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑—É—é {DEF_SUM_MES}.")
			num_messages = DEF_SUM_MES
		
		return await process_summarize(message, num_messages)
		
	request_id = await create_approval_request(user_id, chat_id, chat_Ti)
	keyboard = InlineKeyboardMarkup(inline_keyboard=[
		[InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve:{request_id}:{chat_id}")],
		[InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{request_id}:{chat_id}")]
	])
	
	await bot.send_message(
		ADMIN_ID,
		f"‚ö†Ô∏è –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø:\n"
		f"User: {message.from_user.full_name} (@{message.from_user.username})\n"
		f"–ì—Ä—É–ø–ø–∞: {chat_Ti}\n"
		f"ID –∑–∞–ø—Ä–æ—Å–∞: {request_id}",
		reply_markup=keyboard
	)
	
	await message.reply(
		"‚ùå –í–∞–º –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è.\n"
		"–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
	)

def format_seconds(seconds):
    hours = seconds // 3600
    seconds %= 3600
    minutes = seconds // 60
    if hours > 0:
        return f"{hours}—á:{minutes:02d} –º–∏–Ω."  # :02d –¥–æ–±–∞–≤–ª—è–µ—Ç –≤–µ–¥—É—â–∏–π –Ω–æ–ª—å –∫ –º–∏–Ω—É—Ç–∞–º
    else:
        return f"{minutes} –º–∏–Ω."

# —á–µ–∫–∞–µ–º –≤ –±–¥
async def is_user_approved(chat_id: int ,user_id: int) -> bool:
	return bool(await r.hget(f"chat:{chat_id}:sum_run_v", user_id))

# –î–µ–ª–∞–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é
async def process_summarize(message: Message, num_messages: int):
	chat = message.chat
	chat_id = chat.id
	chat_nm = chat.username or chat.title
	user = message.from_user
	
	ttl = await check_daily_limit(user.username,chat_id)
	if ( ttl > 0):
		await message.answer(f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤!\n –ü–æ–¥–æ–∂–¥–∏—Ç–µ {format_seconds(ttl)}")
		return
	
	try:
		key = f"chat:{chat_id}:history"
		logging.info(f"–°—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {key}")
		messages = await r.lrange(key, 0, num_messages - 1)
		messages = messages[::-1]
	except Exception as e:
		logging.error(f"Redis history error: {e}")
		await message.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞")
		return

	if not messages:
		await message.answer("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏.")
		return

	chat_text = "–ö—Ä–∞—Ç–∫–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞:\n" + "\n".join(messages)
	chat_id_str = str(chat_id)[4:] ## –æ–±—Ä–µ–∑–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç
	chat = message.chat
	if chat.username:
		turl = f"t.me/{chat.username}/"
	else:
		turl = f"t.me/c/{chat_id_str}/"
	try:
		await bot.send_chat_action(chat_id, action="typing")
		summary = await get_gpt4_summary(chat_text, turl)
		logging.info(f"–û—Ç–≤–µ—Ç gpt4:\n {summary}")
		await message.answer(f"üìù –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {num_messages} —Å–æ–æ–±—â–µ–Ω–∏–π:\n{summary}", 
		disable_web_page_preview=True) ## —É–±–∏—Ä–∞–µ–º –ø—Ä–µ–≤—å—é
		# –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
		await upd_daily_limit(user.username,chat_id)
	except Exception as e:
		logging.error(f"GPT error: {e}")
		await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")

# —Å—Ç–∞–≤–∏–º –≤ –±–¥ status pending
async def create_approval_request(user_id: int, chat_id: int, chat_Ti: str) -> str:
	request_id = str(uuid.uuid4())
	request_data = {
		"user_id": user_id,
		"chat_id": chat_id,
		"chat_Ti": chat_Ti,
		"timestamp": datetime.now().isoformat(),
		"status": "pending"
	}
	async with r.pipeline() as pipe:
		await pipe.hset(f"chat:{chat_id}:sum_request", request_id, json.dumps(request_data))
		await pipe.expire(f"chat:{chat_id}:sum_request", 86400)
		await pipe.execute()
	#await r.hset(f"chat:{chat_id}:sum_request", {request_id}, json.dumps(request_data), ex=86400)
	return request_id
	
# —á–µ–∫–∞–µ–º –≤ –±–¥ –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç—ã
async def check_daily_limit(user_id: int,chat_id: int) -> int:
	keyU = f"chat:{chat_id}:sum_run:{user_id}"
	keyG = f"chat:{chat_id}:sum_run"
	ttl = max(int(await r.ttl(keyU)),int(await r.ttl(keyG)))       
	return ttl

# –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç—ã
async def upd_daily_limit(user_id: int,chat_id: int) -> int:
	keyU = f"chat:{chat_id}:sum_run_u:{user_id}"
	keyG = f"chat:{chat_id}:sum_run"
	await r.incr(keyU)
	await r.expire(keyU, 86400 // SEND_MES) ## 24—á –¥–µ–ª–∏–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —é–∑–µ—Ä–∞
	await r.incr(keyG)
	await r.expire(keyG, 86400 // SEND_MES_GROUP) ## 24—á –¥–µ–ª–∏–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞

# –ó–∞–ø—Ä–æ—Å –∫ –ò–ò
async def get_gpt4_summary(text: str, turl: str) -> str:    
	#########################################
	print(f"Roman —É–ø–æ–º—è–Ω—É–ª [—Ç–µ–º–∞]({turl}/message_id)")
	return "Jlsdgssdgdfhdh"
	########################################
	async with aiohttp.ClientSession() as session:
		async with session.post(
			url="https://chatgpt-42.p.rapidapi.com/gpt4",
			headers={
				"Content-Type": "application/json",
				"X-RapidAPI-Key": RAPIDAPI_KEY,
				"X-RapidAPI-Host": "chatgpt-42.p.rapidapi.com"
			},
			json={
				"messages": [{
					"role": "user",
					"content": f"–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ (–Ω–µ –±–æ–ª–µ–µ {MAX_SUM} —Å–∏–º–≤–æ–ª–æ–≤), –≤–∫–ª—é—á–∞—è –≤ —Å–∞–º —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–∏ —Ä–∞–Ω–Ω–µ–π –∏—Å—Ç–æ—Ä–∏–∏, –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏): –†–æ–º–∞–Ω (@Hedgehog) —É–ø–æ–º—è–Ω—É–ª <a href='{turl}43'>—Ç–µ–º–∞</a>:\n{text}, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–ø–æ–º–∏–Ω–µ—Ç—Å—è –Ω–µ —á–∞—Å—Ç–æ, —Ç–æ –Ω–∏–∫–Ω–µ–π–º –º–æ–∂–Ω–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å."
				}]
			}
		) as response:
			response.raise_for_status()
			data = await response.json()
			return data.get("result", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é")
			
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–∞–∑–∞ –∑–∞–ø—Ä–æ—Å–∞
@dp.callback_query(F.data.startswith("approve:") | F.data.startswith("reject:"))
async def handle_approval(callback: CallbackQuery):
	logging.info(f"approval callback_query {callback.data}")
	action, request_id, chat_id = callback.data.split(":")      
	
	request_data = json.loads(await r.hget(f"chat:{chat_id}:sum_request", request_id) or "{}")
	
	if not request_data:
		return await callback.answer("–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
	
	if action == "approve":
		#await r.incr(f"chat:{chat_id}:sum_run_v")
		await r.hset(f"chat:{chat_id}:sum_run_v", request_data['user_id'], 1)
		await callback.message.edit_text(f"‚úÖ –ó–∞–ø—Ä–æ—Å {request_id} –æ–¥–æ–±—Ä–µ–Ω!")
		
		await bot.send_message(
			request_data['user_id'],
			f"üéâ –í–∞–º –æ–¥–æ–±—Ä–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–µ /summarize –≤ –≥—Ä—É–ø–ø–µ {request_data['chat_Ti']}!"
		)
	else:
		await r.hset(f"chat:{chat_id}:sum_run_v", request_data['user_id'], 0)
		await callback.message.edit_text(f"‚ùå –ó–∞–ø—Ä–æ—Å {request_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω!")
		await bot.send_message(
			request_data['user_id'],
			f"üö´ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ /summarize –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω."
		)
	
	await callback.answer()

# –°–ª—É—à–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
@dp.message(F.chat.type.in_({ChatType.GROUP, ChatType.SUPERGROUP}))
async def save_group_message(message: Message, bot: Bot):
	"""–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è—è –ø—Ä–∞–≤–∞."""
	if message.text and message.text.startswith('/'):
		logging.info(f"–°–ª–æ–≤–∏–ª–∏ –∫–æ–º–∞–Ω–¥—É {message.text}")
		return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
	
	logging.info(f"Processing message in chat {message.chat.id}") # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
	
	if message.text:
		try:
			user = message.from_user
			chat = message.chat
			chat_nm = chat.username or chat.title
			user_name = user.username or "Anonyst"
			full_name = user.full_name or "Unknown User"
			
			await add_message(
				chat_id=chat.id,
				chat_nm=chat_nm,
				message_id=message.message_id,
				user_name=user_name,
				full_name=full_name,
				message_text=message.text
			)
			logging.info("Message saved successfully")
		except Exception as e:
			logging.error(f"Error saving message: {e}", exc_info=True)

# —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ –≤ –±–¥
async def add_message(chat_id: int, chat_nm: str, message_id: int, user_name: str, full_name: str, message_text: str):
	logging.info(f"Add message from {full_name} ({user_name}) in chat {chat_nm}")
	try:
		if not message_text.strip():
			return        
		key = f"chat:{chat_id}:history"
		message_data = {
			'id': message_id,
			'user_name': user_name,
			'full_name': full_name,
			'text': message_text.strip()[:4096]
		}
		async with r.pipeline() as pipe:
			await pipe.lpush(key, json.dumps(message_data))
			await pipe.ltrim(key, 0, MAX_HISTORY - 1)
			await pipe.execute()
	except Exception as e:
		logging.error(f"Redis error: {e}")
			
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞/–£–∑–µ—Ä–∞
async def check_admin_permissions(chat_id, user_id):
	chat_member = await bot.get_chat_member(chat_id, user_id)
	logging.info(f"check_admin_permissionschat_member {chat_member}")
	if isinstance(chat_member, ChatMemberOwner):
		return True, "–ë–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∏ –∏–º–µ–µ—Ç –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è."
	elif isinstance(chat_member, ChatMemberAdministrator):
		if (
			chat_member.can_delete_messages
			and chat_member.can_restrict_members
			and chat_member.can_pin_messages
			and chat_member.can_manage_topics
		):
			return True, "–ë–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å –ø—Ä–∞–≤–æ–º —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∑–∞–∫—Ä–µ–ø–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–º–∞–º–∏."
		else:
			return (
				False,
				"–ë–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –Ω–æ –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö –ø—Ä–∞–≤ –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ, –±–ª–æ–∫–∏—Ä–æ–≤–∫—É, –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∏–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–∞–º–∏).",
			)
	elif isinstance(chat_member, ChatMemberRestricted):
		return False, "–ë–æ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –≤ –ø—Ä–∞–≤–∞—Ö –∏ –Ω–µ –º–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
	elif isinstance(chat_member, ChatMemberLeft):
		return False, "–ë–æ—Ç –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç –∏ –Ω–µ –º–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è."
	elif isinstance(chat_member, ChatMemberBanned):
		return False, "–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ —á–∞—Ç–µ –∏ –Ω–µ –º–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è."
	elif isinstance(chat_member, ChatMemberMember):
		return (
			False,
			"–ë–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∏ –Ω–µ –º–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.",
		)
	else:
		return False, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {type(chat_member)}"          

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
	await init_redis()
	await dp.start_polling(bot)

if __name__ == "__main__":    
	asyncio.run(main())